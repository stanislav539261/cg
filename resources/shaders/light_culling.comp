#version 460 core

#define GRID_SIZE_X     16
#define GRID_SIZE_Y     8
#define GRID_SIZE_Z     24
#define MAX_LIGHTPOINTS 1024

struct Cluster {
    vec3  m_BoundsMax;
    float m_Padding0;
    vec3  m_BoundsMin;
    float m_Padding1;
};

struct LightGrid {
    uint  m_Count;
    uint  m_Offset;
    float m_Padding0;
    float m_Padding1;
};

struct LightPoint {
    mat4  m_ViewProjections[6];
    vec3  m_Position;
    float m_Radius;
    vec3  m_BaseColor;
    float m_Padding0;
};

layout(std430, binding = 0) readonly buffer CameraBuffer {
    mat4  g_LastView;
    mat4  g_Projection;
    mat4  g_ProjectionInversed;
    mat4  g_ProjectionNonReversed;
    mat4  g_ProjectionNonReversedInversed;
    mat4  g_View;
    vec3  g_CameraPos;
    float m_Padding0;
    vec2  g_NormTileDim;
    vec2  g_TileSizeInv;
    float g_FarZ;
    float g_NearZ;
    float g_FovX;
    float g_FovY;
    float g_SliceBiasFactor;
    float g_SliceScalingFactor;
    float m_Padding1;
    float m_Padding2;
};

layout(std430, binding = 1) readonly buffer ClusterBuffer {
    Cluster g_Clusters[GRID_SIZE_X * GRID_SIZE_Y * GRID_SIZE_Z];
};

layout(std430, binding = 2) readonly buffer LightCounterBuffer {
    uint g_LightCounter;
};

layout(std430, binding = 3) writeonly buffer LightGridBuffer {
    LightGrid g_LightGrids[];
};

layout(std430, binding = 4) writeonly buffer LightIndexBuffer {
    uint g_LightIndices[];
};

layout(std430, binding = 5) readonly buffer LightPointBuffer {
    LightPoint g_LightPoints[];
};

layout(location = 0) uniform uint g_NumLightPoints;

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

bool LightPoint_IsVisible(const uint tile, const uint light) {
    const vec3 boundsMax = g_Clusters[tile].m_BoundsMax;
    const vec3 boundsMin = g_Clusters[tile].m_BoundsMin;
    const float radius = g_LightPoints[light].m_Radius;
    const vec4 position = g_View * vec4(g_LightPoints[light].m_Position, 1.f);

    float sqDist = 0.f;

    for (int i = 0; i < 3; i++) {
        if (position[i] < boundsMin[i]) {
            const float dist = boundsMin[i] - position[i];

            sqDist += dist * dist;
        } else if (position[i] > boundsMax[i]) {
            const float dist =  boundsMax[i] - position[i];

            sqDist += dist * dist;
        }
    }

    return sqDist < radius * radius;
}

void main() {
    const uint tile = gl_WorkGroupID.x
        + gl_WorkGroupID.y * gl_NumWorkGroups.x
        + gl_WorkGroupID.z * gl_NumWorkGroups.x * gl_NumWorkGroups.y;

    uint numVisibleLights = 0;
    uint visibleLights[MAX_LIGHTPOINTS];

    for (uint i = 0; i < min(g_NumLightPoints, MAX_LIGHTPOINTS); i++) {
        if (LightPoint_IsVisible(tile, i)) {
            visibleLights[numVisibleLights++] = i;
        }
    }

    const uint offset = atomicAdd(g_LightCounter, numVisibleLights);

    for (uint i = 0; i < numVisibleLights; i++) {
        g_LightIndices[offset + i] = visibleLights[i];
    }

    g_LightGrids[tile].m_Count = numVisibleLights;
    g_LightGrids[tile].m_Offset = offset;
}
